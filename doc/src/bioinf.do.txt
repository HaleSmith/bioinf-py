## Import functions for writing to "Primer" book, sphinx,
## latex PDF w/hyperlinkes, etc.
##<%namespace file="defs.mako" import="*"/>
## Problem: these defs introduce blank linkes, much better to
## use Python functions in pydefs.mako

# #include "pydefs.mako"

<%doc>
"Commenting out" large portions of text can be done by these
mako multi-line comments, or alternatively by if tests, either in
the preprocess stage (# #ifdef ...) or in the mako stage
(if some_variable:).

PRIMER_BOOK: text to be included in the "Primer" book.
EBOOK: PDF version of the "Primer" book with hyperlinks (href command).
not PRIMER_BOOK means that this file is a stand-alone document.
</%doc>


% if PRIMER_BOOK:
======= Mixing Loops, Branching, and Functions in Bioinformatics Examples =======
% endif

idx{bioinformatics}
idx{DNA}

Life is definitely digital. The genetic code of all living organisms
are represented by a long sequence of simple molecules called
nucleotides, or bases, which makes up the Deoxyribonucleic acid,
better known as DNA. There are only four such nucleotides, and the
entire genetic code of a human can be seen as a simple, though 3
billion long, string of the letters A, C, G, and T.  Analyzing DNA
data to gain increased biological understanding is much about
searching in (long) strings for certain string patterns involving the
letters A, C, G, and T.  This is an integral part of *bioinformatics*,
a scientific discipline addressing the use of computers to search
for, explore, and use information about genes, nucleic acids, and
proteins.


% if not PRIMER_BOOK:
======= Basic Bioinformatics Examples in Python =======

The instructions to the computer how the analysis is going to
be performed are specified using the "Python": "http://python.org"
programming language.
The forthcoming examples are
simple illustrations of the type of problem settings and corresponding
Python implementations that are encountered in bioinformatics.
However, the leading Python software for bioinformatics applications is
"BioPython": "http://biopython.org" and for
real-world problem solving one should rather utilize BioPython instead
of home-made solutions. The aim of
the sections below is to illustrate the nature of bioinformatics analysis
and introduce what is inside packages like BioPython.

% else:

The leading Python software for bioinformatics applications is
BioPython (found at `http://biopython.org`). The examples
in this book (below and Sections ref{bioinf:DNAanalysis},
ref{bioinf:random}, and ref{bioinf:oo}) are
simple illustrations of the type of problem settings and corresponding
Python implementations that are encountered in bioinformatics. For
real-world problem solving one should rather utilize BioPython, but
the sections below acts as an introduction to what is inside packages
like BioPython.

% endif


# #include "count.do.txt"

# #include "freq.do.txt"

# #include "dotplot.do.txt"

# #include "basefreq.do.txt"

# #include "genes2proteins.do.txt"

# #include "mutate.do.txt"

# #include "class.do.txt"

# #include "exercises.do.txt"

